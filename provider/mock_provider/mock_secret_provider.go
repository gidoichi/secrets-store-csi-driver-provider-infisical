// Code generated by MockGen. DO NOT EDIT.
// Source: secret_provider.go
//
// Generated by this command:
//
//	mockgen -destination=mock_provider/mock_secret_provider.go -source=secret_provider.go
//

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	context "context"
	reflect "reflect"

	provider "github.com/gidoichi/secrets-store-csi-driver-provider-infisical/provider"
	infisical "github.com/infisical/go-sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockInfisicalClientFactory is a mock of InfisicalClientFactory interface.
type MockInfisicalClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockInfisicalClientFactoryMockRecorder
	isgomock struct{}
}

// MockInfisicalClientFactoryMockRecorder is the mock recorder for MockInfisicalClientFactory.
type MockInfisicalClientFactoryMockRecorder struct {
	mock *MockInfisicalClientFactory
}

// NewMockInfisicalClientFactory creates a new mock instance.
func NewMockInfisicalClientFactory(ctrl *gomock.Controller) *MockInfisicalClientFactory {
	mock := &MockInfisicalClientFactory{ctrl: ctrl}
	mock.recorder = &MockInfisicalClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfisicalClientFactory) EXPECT() *MockInfisicalClientFactoryMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockInfisicalClientFactory) NewClient(ctx context.Context, config infisical.Config) provider.InfisicalClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", ctx, config)
	ret0, _ := ret[0].(provider.InfisicalClient)
	return ret0
}

// NewClient indicates an expected call of NewClient.
func (mr *MockInfisicalClientFactoryMockRecorder) NewClient(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockInfisicalClientFactory)(nil).NewClient), ctx, config)
}

// MockInfisicalClient is a mock of InfisicalClient interface.
type MockInfisicalClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfisicalClientMockRecorder
	isgomock struct{}
}

// MockInfisicalClientMockRecorder is the mock recorder for MockInfisicalClient.
type MockInfisicalClientMockRecorder struct {
	mock *MockInfisicalClient
}

// NewMockInfisicalClient creates a new mock instance.
func NewMockInfisicalClient(ctrl *gomock.Controller) *MockInfisicalClient {
	mock := &MockInfisicalClient{ctrl: ctrl}
	mock.recorder = &MockInfisicalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfisicalClient) EXPECT() *MockInfisicalClientMockRecorder {
	return m.recorder
}

// ListSecrets mocks base method.
func (m *MockInfisicalClient) ListSecrets(arg0 infisical.ListSecretsOptions) ([]infisical.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0)
	ret0, _ := ret[0].([]infisical.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockInfisicalClientMockRecorder) ListSecrets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockInfisicalClient)(nil).ListSecrets), arg0)
}

// UniversalAuthLogin mocks base method.
func (m *MockInfisicalClient) UniversalAuthLogin(arg0, arg1 string) (infisical.MachineIdentityCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniversalAuthLogin", arg0, arg1)
	ret0, _ := ret[0].(infisical.MachineIdentityCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniversalAuthLogin indicates an expected call of UniversalAuthLogin.
func (mr *MockInfisicalClientMockRecorder) UniversalAuthLogin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniversalAuthLogin", reflect.TypeOf((*MockInfisicalClient)(nil).UniversalAuthLogin), arg0, arg1)
}
